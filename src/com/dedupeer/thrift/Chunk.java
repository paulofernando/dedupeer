/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dedupeer.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Chunk implements org.apache.thrift.TBase<Chunk, Chunk._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Chunk");

  private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CHUNK_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("chunkNumber", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("md5", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ADLER32_FIELD_DESC = new org.apache.thrift.protocol.TField("adler32", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("pfile", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PCHUNK_FIELD_DESC = new org.apache.thrift.protocol.TField("pchunk", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DESTINATION_FIELD_DESC = new org.apache.thrift.protocol.TField("destination", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChunkStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChunkTupleSchemeFactory());
  }

  public String fileID; // required
  public String chunkNumber; // required
  public String md5; // required
  public String adler32; // required
  public String index; // required
  public String length; // required
  public String pfile; // required
  public String pchunk; // required
  public String destination; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILE_ID((short)1, "fileID"),
    CHUNK_NUMBER((short)2, "chunkNumber"),
    MD5((short)3, "md5"),
    ADLER32((short)4, "adler32"),
    INDEX((short)5, "index"),
    LENGTH((short)6, "length"),
    PFILE((short)7, "pfile"),
    PCHUNK((short)8, "pchunk"),
    DESTINATION((short)9, "destination");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILE_ID
          return FILE_ID;
        case 2: // CHUNK_NUMBER
          return CHUNK_NUMBER;
        case 3: // MD5
          return MD5;
        case 4: // ADLER32
          return ADLER32;
        case 5: // INDEX
          return INDEX;
        case 6: // LENGTH
          return LENGTH;
        case 7: // PFILE
          return PFILE;
        case 8: // PCHUNK
          return PCHUNK;
        case 9: // DESTINATION
          return DESTINATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHUNK_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("chunkNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MD5, new org.apache.thrift.meta_data.FieldMetaData("md5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADLER32, new org.apache.thrift.meta_data.FieldMetaData("adler32", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PFILE, new org.apache.thrift.meta_data.FieldMetaData("pfile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PCHUNK, new org.apache.thrift.meta_data.FieldMetaData("pchunk", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESTINATION, new org.apache.thrift.meta_data.FieldMetaData("destination", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Chunk.class, metaDataMap);
  }

  public Chunk() {
  }

  public Chunk(
    String fileID,
    String chunkNumber,
    String md5,
    String adler32,
    String index,
    String length,
    String pfile,
    String pchunk,
    String destination)
  {
    this();
    this.fileID = fileID;
    this.chunkNumber = chunkNumber;
    this.md5 = md5;
    this.adler32 = adler32;
    this.index = index;
    this.length = length;
    this.pfile = pfile;
    this.pchunk = pchunk;
    this.destination = destination;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Chunk(Chunk other) {
    if (other.isSetFileID()) {
      this.fileID = other.fileID;
    }
    if (other.isSetChunkNumber()) {
      this.chunkNumber = other.chunkNumber;
    }
    if (other.isSetMd5()) {
      this.md5 = other.md5;
    }
    if (other.isSetAdler32()) {
      this.adler32 = other.adler32;
    }
    if (other.isSetIndex()) {
      this.index = other.index;
    }
    if (other.isSetLength()) {
      this.length = other.length;
    }
    if (other.isSetPfile()) {
      this.pfile = other.pfile;
    }
    if (other.isSetPchunk()) {
      this.pchunk = other.pchunk;
    }
    if (other.isSetDestination()) {
      this.destination = other.destination;
    }
  }

  public Chunk deepCopy() {
    return new Chunk(this);
  }

  @Override
  public void clear() {
    this.fileID = null;
    this.chunkNumber = null;
    this.md5 = null;
    this.adler32 = null;
    this.index = null;
    this.length = null;
    this.pfile = null;
    this.pchunk = null;
    this.destination = null;
  }

  public String getFileID() {
    return this.fileID;
  }

  public Chunk setFileID(String fileID) {
    this.fileID = fileID;
    return this;
  }

  public void unsetFileID() {
    this.fileID = null;
  }

  /** Returns true if field fileID is set (has been assigned a value) and false otherwise */
  public boolean isSetFileID() {
    return this.fileID != null;
  }

  public void setFileIDIsSet(boolean value) {
    if (!value) {
      this.fileID = null;
    }
  }

  public String getChunkNumber() {
    return this.chunkNumber;
  }

  public Chunk setChunkNumber(String chunkNumber) {
    this.chunkNumber = chunkNumber;
    return this;
  }

  public void unsetChunkNumber() {
    this.chunkNumber = null;
  }

  /** Returns true if field chunkNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetChunkNumber() {
    return this.chunkNumber != null;
  }

  public void setChunkNumberIsSet(boolean value) {
    if (!value) {
      this.chunkNumber = null;
    }
  }

  public String getMd5() {
    return this.md5;
  }

  public Chunk setMd5(String md5) {
    this.md5 = md5;
    return this;
  }

  public void unsetMd5() {
    this.md5 = null;
  }

  /** Returns true if field md5 is set (has been assigned a value) and false otherwise */
  public boolean isSetMd5() {
    return this.md5 != null;
  }

  public void setMd5IsSet(boolean value) {
    if (!value) {
      this.md5 = null;
    }
  }

  public String getAdler32() {
    return this.adler32;
  }

  public Chunk setAdler32(String adler32) {
    this.adler32 = adler32;
    return this;
  }

  public void unsetAdler32() {
    this.adler32 = null;
  }

  /** Returns true if field adler32 is set (has been assigned a value) and false otherwise */
  public boolean isSetAdler32() {
    return this.adler32 != null;
  }

  public void setAdler32IsSet(boolean value) {
    if (!value) {
      this.adler32 = null;
    }
  }

  public String getIndex() {
    return this.index;
  }

  public Chunk setIndex(String index) {
    this.index = index;
    return this;
  }

  public void unsetIndex() {
    this.index = null;
  }

  /** Returns true if field index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return this.index != null;
  }

  public void setIndexIsSet(boolean value) {
    if (!value) {
      this.index = null;
    }
  }

  public String getLength() {
    return this.length;
  }

  public Chunk setLength(String length) {
    this.length = length;
    return this;
  }

  public void unsetLength() {
    this.length = null;
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return this.length != null;
  }

  public void setLengthIsSet(boolean value) {
    if (!value) {
      this.length = null;
    }
  }

  public String getPfile() {
    return this.pfile;
  }

  public Chunk setPfile(String pfile) {
    this.pfile = pfile;
    return this;
  }

  public void unsetPfile() {
    this.pfile = null;
  }

  /** Returns true if field pfile is set (has been assigned a value) and false otherwise */
  public boolean isSetPfile() {
    return this.pfile != null;
  }

  public void setPfileIsSet(boolean value) {
    if (!value) {
      this.pfile = null;
    }
  }

  public String getPchunk() {
    return this.pchunk;
  }

  public Chunk setPchunk(String pchunk) {
    this.pchunk = pchunk;
    return this;
  }

  public void unsetPchunk() {
    this.pchunk = null;
  }

  /** Returns true if field pchunk is set (has been assigned a value) and false otherwise */
  public boolean isSetPchunk() {
    return this.pchunk != null;
  }

  public void setPchunkIsSet(boolean value) {
    if (!value) {
      this.pchunk = null;
    }
  }

  public String getDestination() {
    return this.destination;
  }

  public Chunk setDestination(String destination) {
    this.destination = destination;
    return this;
  }

  public void unsetDestination() {
    this.destination = null;
  }

  /** Returns true if field destination is set (has been assigned a value) and false otherwise */
  public boolean isSetDestination() {
    return this.destination != null;
  }

  public void setDestinationIsSet(boolean value) {
    if (!value) {
      this.destination = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FILE_ID:
      if (value == null) {
        unsetFileID();
      } else {
        setFileID((String)value);
      }
      break;

    case CHUNK_NUMBER:
      if (value == null) {
        unsetChunkNumber();
      } else {
        setChunkNumber((String)value);
      }
      break;

    case MD5:
      if (value == null) {
        unsetMd5();
      } else {
        setMd5((String)value);
      }
      break;

    case ADLER32:
      if (value == null) {
        unsetAdler32();
      } else {
        setAdler32((String)value);
      }
      break;

    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((String)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((String)value);
      }
      break;

    case PFILE:
      if (value == null) {
        unsetPfile();
      } else {
        setPfile((String)value);
      }
      break;

    case PCHUNK:
      if (value == null) {
        unsetPchunk();
      } else {
        setPchunk((String)value);
      }
      break;

    case DESTINATION:
      if (value == null) {
        unsetDestination();
      } else {
        setDestination((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FILE_ID:
      return getFileID();

    case CHUNK_NUMBER:
      return getChunkNumber();

    case MD5:
      return getMd5();

    case ADLER32:
      return getAdler32();

    case INDEX:
      return getIndex();

    case LENGTH:
      return getLength();

    case PFILE:
      return getPfile();

    case PCHUNK:
      return getPchunk();

    case DESTINATION:
      return getDestination();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FILE_ID:
      return isSetFileID();
    case CHUNK_NUMBER:
      return isSetChunkNumber();
    case MD5:
      return isSetMd5();
    case ADLER32:
      return isSetAdler32();
    case INDEX:
      return isSetIndex();
    case LENGTH:
      return isSetLength();
    case PFILE:
      return isSetPfile();
    case PCHUNK:
      return isSetPchunk();
    case DESTINATION:
      return isSetDestination();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Chunk)
      return this.equals((Chunk)that);
    return false;
  }

  public boolean equals(Chunk that) {
    if (that == null)
      return false;

    boolean this_present_fileID = true && this.isSetFileID();
    boolean that_present_fileID = true && that.isSetFileID();
    if (this_present_fileID || that_present_fileID) {
      if (!(this_present_fileID && that_present_fileID))
        return false;
      if (!this.fileID.equals(that.fileID))
        return false;
    }

    boolean this_present_chunkNumber = true && this.isSetChunkNumber();
    boolean that_present_chunkNumber = true && that.isSetChunkNumber();
    if (this_present_chunkNumber || that_present_chunkNumber) {
      if (!(this_present_chunkNumber && that_present_chunkNumber))
        return false;
      if (!this.chunkNumber.equals(that.chunkNumber))
        return false;
    }

    boolean this_present_md5 = true && this.isSetMd5();
    boolean that_present_md5 = true && that.isSetMd5();
    if (this_present_md5 || that_present_md5) {
      if (!(this_present_md5 && that_present_md5))
        return false;
      if (!this.md5.equals(that.md5))
        return false;
    }

    boolean this_present_adler32 = true && this.isSetAdler32();
    boolean that_present_adler32 = true && that.isSetAdler32();
    if (this_present_adler32 || that_present_adler32) {
      if (!(this_present_adler32 && that_present_adler32))
        return false;
      if (!this.adler32.equals(that.adler32))
        return false;
    }

    boolean this_present_index = true && this.isSetIndex();
    boolean that_present_index = true && that.isSetIndex();
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (!this.index.equals(that.index))
        return false;
    }

    boolean this_present_length = true && this.isSetLength();
    boolean that_present_length = true && that.isSetLength();
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (!this.length.equals(that.length))
        return false;
    }

    boolean this_present_pfile = true && this.isSetPfile();
    boolean that_present_pfile = true && that.isSetPfile();
    if (this_present_pfile || that_present_pfile) {
      if (!(this_present_pfile && that_present_pfile))
        return false;
      if (!this.pfile.equals(that.pfile))
        return false;
    }

    boolean this_present_pchunk = true && this.isSetPchunk();
    boolean that_present_pchunk = true && that.isSetPchunk();
    if (this_present_pchunk || that_present_pchunk) {
      if (!(this_present_pchunk && that_present_pchunk))
        return false;
      if (!this.pchunk.equals(that.pchunk))
        return false;
    }

    boolean this_present_destination = true && this.isSetDestination();
    boolean that_present_destination = true && that.isSetDestination();
    if (this_present_destination || that_present_destination) {
      if (!(this_present_destination && that_present_destination))
        return false;
      if (!this.destination.equals(that.destination))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Chunk other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Chunk typedOther = (Chunk)other;

    lastComparison = Boolean.valueOf(isSetFileID()).compareTo(typedOther.isSetFileID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileID, typedOther.fileID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChunkNumber()).compareTo(typedOther.isSetChunkNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChunkNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chunkNumber, typedOther.chunkNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMd5()).compareTo(typedOther.isSetMd5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMd5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.md5, typedOther.md5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdler32()).compareTo(typedOther.isSetAdler32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdler32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adler32, typedOther.adler32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(typedOther.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, typedOther.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(typedOther.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, typedOther.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPfile()).compareTo(typedOther.isSetPfile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPfile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pfile, typedOther.pfile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPchunk()).compareTo(typedOther.isSetPchunk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPchunk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pchunk, typedOther.pchunk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDestination()).compareTo(typedOther.isSetDestination());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestination()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destination, typedOther.destination);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Chunk(");
    boolean first = true;

    sb.append("fileID:");
    if (this.fileID == null) {
      sb.append("null");
    } else {
      sb.append(this.fileID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chunkNumber:");
    if (this.chunkNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.chunkNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("md5:");
    if (this.md5 == null) {
      sb.append("null");
    } else {
      sb.append(this.md5);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("adler32:");
    if (this.adler32 == null) {
      sb.append("null");
    } else {
      sb.append(this.adler32);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("index:");
    if (this.index == null) {
      sb.append("null");
    } else {
      sb.append(this.index);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    if (this.length == null) {
      sb.append("null");
    } else {
      sb.append(this.length);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pfile:");
    if (this.pfile == null) {
      sb.append("null");
    } else {
      sb.append(this.pfile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pchunk:");
    if (this.pchunk == null) {
      sb.append("null");
    } else {
      sb.append(this.pchunk);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("destination:");
    if (this.destination == null) {
      sb.append("null");
    } else {
      sb.append(this.destination);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChunkStandardSchemeFactory implements SchemeFactory {
    public ChunkStandardScheme getScheme() {
      return new ChunkStandardScheme();
    }
  }

  private static class ChunkStandardScheme extends StandardScheme<Chunk> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Chunk struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileID = iprot.readString();
              struct.setFileIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHUNK_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chunkNumber = iprot.readString();
              struct.setChunkNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.md5 = iprot.readString();
              struct.setMd5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ADLER32
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adler32 = iprot.readString();
              struct.setAdler32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.index = iprot.readString();
              struct.setIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.length = iprot.readString();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pfile = iprot.readString();
              struct.setPfileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PCHUNK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pchunk = iprot.readString();
              struct.setPchunkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DESTINATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.destination = iprot.readString();
              struct.setDestinationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Chunk struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fileID != null) {
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeString(struct.fileID);
        oprot.writeFieldEnd();
      }
      if (struct.chunkNumber != null) {
        oprot.writeFieldBegin(CHUNK_NUMBER_FIELD_DESC);
        oprot.writeString(struct.chunkNumber);
        oprot.writeFieldEnd();
      }
      if (struct.md5 != null) {
        oprot.writeFieldBegin(MD5_FIELD_DESC);
        oprot.writeString(struct.md5);
        oprot.writeFieldEnd();
      }
      if (struct.adler32 != null) {
        oprot.writeFieldBegin(ADLER32_FIELD_DESC);
        oprot.writeString(struct.adler32);
        oprot.writeFieldEnd();
      }
      if (struct.index != null) {
        oprot.writeFieldBegin(INDEX_FIELD_DESC);
        oprot.writeString(struct.index);
        oprot.writeFieldEnd();
      }
      if (struct.length != null) {
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeString(struct.length);
        oprot.writeFieldEnd();
      }
      if (struct.pfile != null) {
        oprot.writeFieldBegin(PFILE_FIELD_DESC);
        oprot.writeString(struct.pfile);
        oprot.writeFieldEnd();
      }
      if (struct.pchunk != null) {
        oprot.writeFieldBegin(PCHUNK_FIELD_DESC);
        oprot.writeString(struct.pchunk);
        oprot.writeFieldEnd();
      }
      if (struct.destination != null) {
        oprot.writeFieldBegin(DESTINATION_FIELD_DESC);
        oprot.writeString(struct.destination);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChunkTupleSchemeFactory implements SchemeFactory {
    public ChunkTupleScheme getScheme() {
      return new ChunkTupleScheme();
    }
  }

  private static class ChunkTupleScheme extends TupleScheme<Chunk> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Chunk struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFileID()) {
        optionals.set(0);
      }
      if (struct.isSetChunkNumber()) {
        optionals.set(1);
      }
      if (struct.isSetMd5()) {
        optionals.set(2);
      }
      if (struct.isSetAdler32()) {
        optionals.set(3);
      }
      if (struct.isSetIndex()) {
        optionals.set(4);
      }
      if (struct.isSetLength()) {
        optionals.set(5);
      }
      if (struct.isSetPfile()) {
        optionals.set(6);
      }
      if (struct.isSetPchunk()) {
        optionals.set(7);
      }
      if (struct.isSetDestination()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetFileID()) {
        oprot.writeString(struct.fileID);
      }
      if (struct.isSetChunkNumber()) {
        oprot.writeString(struct.chunkNumber);
      }
      if (struct.isSetMd5()) {
        oprot.writeString(struct.md5);
      }
      if (struct.isSetAdler32()) {
        oprot.writeString(struct.adler32);
      }
      if (struct.isSetIndex()) {
        oprot.writeString(struct.index);
      }
      if (struct.isSetLength()) {
        oprot.writeString(struct.length);
      }
      if (struct.isSetPfile()) {
        oprot.writeString(struct.pfile);
      }
      if (struct.isSetPchunk()) {
        oprot.writeString(struct.pchunk);
      }
      if (struct.isSetDestination()) {
        oprot.writeString(struct.destination);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Chunk struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.fileID = iprot.readString();
        struct.setFileIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.chunkNumber = iprot.readString();
        struct.setChunkNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.md5 = iprot.readString();
        struct.setMd5IsSet(true);
      }
      if (incoming.get(3)) {
        struct.adler32 = iprot.readString();
        struct.setAdler32IsSet(true);
      }
      if (incoming.get(4)) {
        struct.index = iprot.readString();
        struct.setIndexIsSet(true);
      }
      if (incoming.get(5)) {
        struct.length = iprot.readString();
        struct.setLengthIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pfile = iprot.readString();
        struct.setPfileIsSet(true);
      }
      if (incoming.get(7)) {
        struct.pchunk = iprot.readString();
        struct.setPchunkIsSet(true);
      }
      if (incoming.get(8)) {
        struct.destination = iprot.readString();
        struct.setDestinationIsSet(true);
      }
    }
  }

}

