/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dedupeer.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DeduplicationService {

  public interface Iface {

    public Map<Long,Chunk> deduplicate(Map<Integer,Map<String,String>> chunksInfo, String pathOfFile, int chunkSizeInBytes, int bytesToLoadByTime) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void deduplicate(Map<Integer,Map<String,String>> chunksInfo, String pathOfFile, int chunkSizeInBytes, int bytesToLoadByTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deduplicate_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Map<Long,Chunk> deduplicate(Map<Integer,Map<String,String>> chunksInfo, String pathOfFile, int chunkSizeInBytes, int bytesToLoadByTime) throws org.apache.thrift.TException
    {
      send_deduplicate(chunksInfo, pathOfFile, chunkSizeInBytes, bytesToLoadByTime);
      return recv_deduplicate();
    }

    public void send_deduplicate(Map<Integer,Map<String,String>> chunksInfo, String pathOfFile, int chunkSizeInBytes, int bytesToLoadByTime) throws org.apache.thrift.TException
    {
      deduplicate_args args = new deduplicate_args();
      args.setChunksInfo(chunksInfo);
      args.setPathOfFile(pathOfFile);
      args.setChunkSizeInBytes(chunkSizeInBytes);
      args.setBytesToLoadByTime(bytesToLoadByTime);
      sendBase("deduplicate", args);
    }

    public Map<Long,Chunk> recv_deduplicate() throws org.apache.thrift.TException
    {
      deduplicate_result result = new deduplicate_result();
      receiveBase(result, "deduplicate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deduplicate failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void deduplicate(Map<Integer,Map<String,String>> chunksInfo, String pathOfFile, int chunkSizeInBytes, int bytesToLoadByTime, org.apache.thrift.async.AsyncMethodCallback<deduplicate_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deduplicate_call method_call = new deduplicate_call(chunksInfo, pathOfFile, chunkSizeInBytes, bytesToLoadByTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deduplicate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<Integer,Map<String,String>> chunksInfo;
      private String pathOfFile;
      private int chunkSizeInBytes;
      private int bytesToLoadByTime;
      public deduplicate_call(Map<Integer,Map<String,String>> chunksInfo, String pathOfFile, int chunkSizeInBytes, int bytesToLoadByTime, org.apache.thrift.async.AsyncMethodCallback<deduplicate_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.chunksInfo = chunksInfo;
        this.pathOfFile = pathOfFile;
        this.chunkSizeInBytes = chunkSizeInBytes;
        this.bytesToLoadByTime = bytesToLoadByTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deduplicate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deduplicate_args args = new deduplicate_args();
        args.setChunksInfo(chunksInfo);
        args.setPathOfFile(pathOfFile);
        args.setChunkSizeInBytes(chunkSizeInBytes);
        args.setBytesToLoadByTime(bytesToLoadByTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Long,Chunk> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deduplicate();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("deduplicate", new deduplicate());
      return processMap;
    }

    public static class deduplicate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deduplicate_args> {
      public deduplicate() {
        super("deduplicate");
      }

      public deduplicate_args getEmptyArgsInstance() {
        return new deduplicate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deduplicate_result getResult(I iface, deduplicate_args args) throws org.apache.thrift.TException {
        deduplicate_result result = new deduplicate_result();
        result.success = iface.deduplicate(args.chunksInfo, args.pathOfFile, args.chunkSizeInBytes, args.bytesToLoadByTime);
        return result;
      }
    }

  }

  public static class deduplicate_args implements org.apache.thrift.TBase<deduplicate_args, deduplicate_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deduplicate_args");

    private static final org.apache.thrift.protocol.TField CHUNKS_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("chunksInfo", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField PATH_OF_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("pathOfFile", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CHUNK_SIZE_IN_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("chunkSizeInBytes", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField BYTES_TO_LOAD_BY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("bytesToLoadByTime", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deduplicate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deduplicate_argsTupleSchemeFactory());
    }

    public Map<Integer,Map<String,String>> chunksInfo; // required
    public String pathOfFile; // required
    public int chunkSizeInBytes; // required
    public int bytesToLoadByTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHUNKS_INFO((short)1, "chunksInfo"),
      PATH_OF_FILE((short)2, "pathOfFile"),
      CHUNK_SIZE_IN_BYTES((short)3, "chunkSizeInBytes"),
      BYTES_TO_LOAD_BY_TIME((short)4, "bytesToLoadByTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHUNKS_INFO
            return CHUNKS_INFO;
          case 2: // PATH_OF_FILE
            return PATH_OF_FILE;
          case 3: // CHUNK_SIZE_IN_BYTES
            return CHUNK_SIZE_IN_BYTES;
          case 4: // BYTES_TO_LOAD_BY_TIME
            return BYTES_TO_LOAD_BY_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CHUNKSIZEINBYTES_ISSET_ID = 0;
    private static final int __BYTESTOLOADBYTIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHUNKS_INFO, new org.apache.thrift.meta_data.FieldMetaData("chunksInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP          , "hashesToCompare")));
      tmpMap.put(_Fields.PATH_OF_FILE, new org.apache.thrift.meta_data.FieldMetaData("pathOfFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHUNK_SIZE_IN_BYTES, new org.apache.thrift.meta_data.FieldMetaData("chunkSizeInBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.BYTES_TO_LOAD_BY_TIME, new org.apache.thrift.meta_data.FieldMetaData("bytesToLoadByTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deduplicate_args.class, metaDataMap);
    }

    public deduplicate_args() {
    }

    public deduplicate_args(
      Map<Integer,Map<String,String>> chunksInfo,
      String pathOfFile,
      int chunkSizeInBytes,
      int bytesToLoadByTime)
    {
      this();
      this.chunksInfo = chunksInfo;
      this.pathOfFile = pathOfFile;
      this.chunkSizeInBytes = chunkSizeInBytes;
      setChunkSizeInBytesIsSet(true);
      this.bytesToLoadByTime = bytesToLoadByTime;
      setBytesToLoadByTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deduplicate_args(deduplicate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetChunksInfo()) {
        this.chunksInfo = other.chunksInfo;
      }
      if (other.isSetPathOfFile()) {
        this.pathOfFile = other.pathOfFile;
      }
      this.chunkSizeInBytes = other.chunkSizeInBytes;
      this.bytesToLoadByTime = other.bytesToLoadByTime;
    }

    public deduplicate_args deepCopy() {
      return new deduplicate_args(this);
    }

    @Override
    public void clear() {
      this.chunksInfo = null;
      this.pathOfFile = null;
      setChunkSizeInBytesIsSet(false);
      this.chunkSizeInBytes = 0;
      setBytesToLoadByTimeIsSet(false);
      this.bytesToLoadByTime = 0;
    }

    public int getChunksInfoSize() {
      return (this.chunksInfo == null) ? 0 : this.chunksInfo.size();
    }

    public void putToChunksInfo(int key, Map<String,String> val) {
      if (this.chunksInfo == null) {
        this.chunksInfo = new HashMap<Integer,Map<String,String>>();
      }
      this.chunksInfo.put(key, val);
    }

    public Map<Integer,Map<String,String>> getChunksInfo() {
      return this.chunksInfo;
    }

    public deduplicate_args setChunksInfo(Map<Integer,Map<String,String>> chunksInfo) {
      this.chunksInfo = chunksInfo;
      return this;
    }

    public void unsetChunksInfo() {
      this.chunksInfo = null;
    }

    /** Returns true if field chunksInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetChunksInfo() {
      return this.chunksInfo != null;
    }

    public void setChunksInfoIsSet(boolean value) {
      if (!value) {
        this.chunksInfo = null;
      }
    }

    public String getPathOfFile() {
      return this.pathOfFile;
    }

    public deduplicate_args setPathOfFile(String pathOfFile) {
      this.pathOfFile = pathOfFile;
      return this;
    }

    public void unsetPathOfFile() {
      this.pathOfFile = null;
    }

    /** Returns true if field pathOfFile is set (has been assigned a value) and false otherwise */
    public boolean isSetPathOfFile() {
      return this.pathOfFile != null;
    }

    public void setPathOfFileIsSet(boolean value) {
      if (!value) {
        this.pathOfFile = null;
      }
    }

    public int getChunkSizeInBytes() {
      return this.chunkSizeInBytes;
    }

    public deduplicate_args setChunkSizeInBytes(int chunkSizeInBytes) {
      this.chunkSizeInBytes = chunkSizeInBytes;
      setChunkSizeInBytesIsSet(true);
      return this;
    }

    public void unsetChunkSizeInBytes() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHUNKSIZEINBYTES_ISSET_ID);
    }

    /** Returns true if field chunkSizeInBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetChunkSizeInBytes() {
      return EncodingUtils.testBit(__isset_bitfield, __CHUNKSIZEINBYTES_ISSET_ID);
    }

    public void setChunkSizeInBytesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHUNKSIZEINBYTES_ISSET_ID, value);
    }

    public int getBytesToLoadByTime() {
      return this.bytesToLoadByTime;
    }

    public deduplicate_args setBytesToLoadByTime(int bytesToLoadByTime) {
      this.bytesToLoadByTime = bytesToLoadByTime;
      setBytesToLoadByTimeIsSet(true);
      return this;
    }

    public void unsetBytesToLoadByTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BYTESTOLOADBYTIME_ISSET_ID);
    }

    /** Returns true if field bytesToLoadByTime is set (has been assigned a value) and false otherwise */
    public boolean isSetBytesToLoadByTime() {
      return EncodingUtils.testBit(__isset_bitfield, __BYTESTOLOADBYTIME_ISSET_ID);
    }

    public void setBytesToLoadByTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BYTESTOLOADBYTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHUNKS_INFO:
        if (value == null) {
          unsetChunksInfo();
        } else {
          setChunksInfo((Map<Integer,Map<String,String>>)value);
        }
        break;

      case PATH_OF_FILE:
        if (value == null) {
          unsetPathOfFile();
        } else {
          setPathOfFile((String)value);
        }
        break;

      case CHUNK_SIZE_IN_BYTES:
        if (value == null) {
          unsetChunkSizeInBytes();
        } else {
          setChunkSizeInBytes((Integer)value);
        }
        break;

      case BYTES_TO_LOAD_BY_TIME:
        if (value == null) {
          unsetBytesToLoadByTime();
        } else {
          setBytesToLoadByTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHUNKS_INFO:
        return getChunksInfo();

      case PATH_OF_FILE:
        return getPathOfFile();

      case CHUNK_SIZE_IN_BYTES:
        return Integer.valueOf(getChunkSizeInBytes());

      case BYTES_TO_LOAD_BY_TIME:
        return Integer.valueOf(getBytesToLoadByTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHUNKS_INFO:
        return isSetChunksInfo();
      case PATH_OF_FILE:
        return isSetPathOfFile();
      case CHUNK_SIZE_IN_BYTES:
        return isSetChunkSizeInBytes();
      case BYTES_TO_LOAD_BY_TIME:
        return isSetBytesToLoadByTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deduplicate_args)
        return this.equals((deduplicate_args)that);
      return false;
    }

    public boolean equals(deduplicate_args that) {
      if (that == null)
        return false;

      boolean this_present_chunksInfo = true && this.isSetChunksInfo();
      boolean that_present_chunksInfo = true && that.isSetChunksInfo();
      if (this_present_chunksInfo || that_present_chunksInfo) {
        if (!(this_present_chunksInfo && that_present_chunksInfo))
          return false;
        if (!this.chunksInfo.equals(that.chunksInfo))
          return false;
      }

      boolean this_present_pathOfFile = true && this.isSetPathOfFile();
      boolean that_present_pathOfFile = true && that.isSetPathOfFile();
      if (this_present_pathOfFile || that_present_pathOfFile) {
        if (!(this_present_pathOfFile && that_present_pathOfFile))
          return false;
        if (!this.pathOfFile.equals(that.pathOfFile))
          return false;
      }

      boolean this_present_chunkSizeInBytes = true;
      boolean that_present_chunkSizeInBytes = true;
      if (this_present_chunkSizeInBytes || that_present_chunkSizeInBytes) {
        if (!(this_present_chunkSizeInBytes && that_present_chunkSizeInBytes))
          return false;
        if (this.chunkSizeInBytes != that.chunkSizeInBytes)
          return false;
      }

      boolean this_present_bytesToLoadByTime = true;
      boolean that_present_bytesToLoadByTime = true;
      if (this_present_bytesToLoadByTime || that_present_bytesToLoadByTime) {
        if (!(this_present_bytesToLoadByTime && that_present_bytesToLoadByTime))
          return false;
        if (this.bytesToLoadByTime != that.bytesToLoadByTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deduplicate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deduplicate_args typedOther = (deduplicate_args)other;

      lastComparison = Boolean.valueOf(isSetChunksInfo()).compareTo(typedOther.isSetChunksInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChunksInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chunksInfo, typedOther.chunksInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPathOfFile()).compareTo(typedOther.isSetPathOfFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPathOfFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pathOfFile, typedOther.pathOfFile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChunkSizeInBytes()).compareTo(typedOther.isSetChunkSizeInBytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChunkSizeInBytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chunkSizeInBytes, typedOther.chunkSizeInBytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBytesToLoadByTime()).compareTo(typedOther.isSetBytesToLoadByTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBytesToLoadByTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bytesToLoadByTime, typedOther.bytesToLoadByTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deduplicate_args(");
      boolean first = true;

      sb.append("chunksInfo:");
      if (this.chunksInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.chunksInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pathOfFile:");
      if (this.pathOfFile == null) {
        sb.append("null");
      } else {
        sb.append(this.pathOfFile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("chunkSizeInBytes:");
      sb.append(this.chunkSizeInBytes);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bytesToLoadByTime:");
      sb.append(this.bytesToLoadByTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deduplicate_argsStandardSchemeFactory implements SchemeFactory {
      public deduplicate_argsStandardScheme getScheme() {
        return new deduplicate_argsStandardScheme();
      }
    }

    private static class deduplicate_argsStandardScheme extends StandardScheme<deduplicate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deduplicate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHUNKS_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.chunksInfo = new HashMap<Integer,Map<String,String>>(2*_map0.size);
                  for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                  {
                    int _key2; // required
                    Map<String,String> _val3; // optional
                    _key2 = iprot.readI32();
                    {
                      org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                      _val3 = new HashMap<String,String>(2*_map4.size);
                      for (int _i5 = 0; _i5 < _map4.size; ++_i5)
                      {
                        String _key6; // required
                        String _val7; // optional
                        _key6 = iprot.readString();
                        _val7 = iprot.readString();
                        _val3.put(_key6, _val7);
                      }
                      iprot.readMapEnd();
                    }
                    struct.chunksInfo.put(_key2, _val3);
                  }
                  iprot.readMapEnd();
                }
                struct.setChunksInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PATH_OF_FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pathOfFile = iprot.readString();
                struct.setPathOfFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHUNK_SIZE_IN_BYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.chunkSizeInBytes = iprot.readI32();
                struct.setChunkSizeInBytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BYTES_TO_LOAD_BY_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bytesToLoadByTime = iprot.readI32();
                struct.setBytesToLoadByTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deduplicate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.chunksInfo != null) {
          oprot.writeFieldBegin(CHUNKS_INFO_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.MAP, struct.chunksInfo.size()));
            for (Map.Entry<Integer, Map<String,String>> _iter8 : struct.chunksInfo.entrySet())
            {
              oprot.writeI32(_iter8.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter8.getValue().size()));
                for (Map.Entry<String, String> _iter9 : _iter8.getValue().entrySet())
                {
                  oprot.writeString(_iter9.getKey());
                  oprot.writeString(_iter9.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.pathOfFile != null) {
          oprot.writeFieldBegin(PATH_OF_FILE_FIELD_DESC);
          oprot.writeString(struct.pathOfFile);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CHUNK_SIZE_IN_BYTES_FIELD_DESC);
        oprot.writeI32(struct.chunkSizeInBytes);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BYTES_TO_LOAD_BY_TIME_FIELD_DESC);
        oprot.writeI32(struct.bytesToLoadByTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deduplicate_argsTupleSchemeFactory implements SchemeFactory {
      public deduplicate_argsTupleScheme getScheme() {
        return new deduplicate_argsTupleScheme();
      }
    }

    private static class deduplicate_argsTupleScheme extends TupleScheme<deduplicate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deduplicate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChunksInfo()) {
          optionals.set(0);
        }
        if (struct.isSetPathOfFile()) {
          optionals.set(1);
        }
        if (struct.isSetChunkSizeInBytes()) {
          optionals.set(2);
        }
        if (struct.isSetBytesToLoadByTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetChunksInfo()) {
          {
            oprot.writeI32(struct.chunksInfo.size());
            for (Map.Entry<Integer, Map<String,String>> _iter10 : struct.chunksInfo.entrySet())
            {
              oprot.writeI32(_iter10.getKey());
              {
                oprot.writeI32(_iter10.getValue().size());
                for (Map.Entry<String, String> _iter11 : _iter10.getValue().entrySet())
                {
                  oprot.writeString(_iter11.getKey());
                  oprot.writeString(_iter11.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetPathOfFile()) {
          oprot.writeString(struct.pathOfFile);
        }
        if (struct.isSetChunkSizeInBytes()) {
          oprot.writeI32(struct.chunkSizeInBytes);
        }
        if (struct.isSetBytesToLoadByTime()) {
          oprot.writeI32(struct.bytesToLoadByTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deduplicate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map12 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.chunksInfo = new HashMap<Integer,Map<String,String>>(2*_map12.size);
            for (int _i13 = 0; _i13 < _map12.size; ++_i13)
            {
              int _key14; // required
              Map<String,String> _val15; // required
              _key14 = iprot.readI32();
              {
                org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val15 = new HashMap<String,String>(2*_map16.size);
                for (int _i17 = 0; _i17 < _map16.size; ++_i17)
                {
                  String _key18; // required
                  String _val19; // required
                  _key18 = iprot.readString();
                  _val19 = iprot.readString();
                  _val15.put(_key18, _val19);
                }
              }
              struct.chunksInfo.put(_key14, _val15);
            }
          }
          struct.setChunksInfoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pathOfFile = iprot.readString();
          struct.setPathOfFileIsSet(true);
        }
        if (incoming.get(2)) {
          struct.chunkSizeInBytes = iprot.readI32();
          struct.setChunkSizeInBytesIsSet(true);
        }
        if (incoming.get(3)) {
          struct.bytesToLoadByTime = iprot.readI32();
          struct.setBytesToLoadByTimeIsSet(true);
        }
      }
    }

  }

  public static class deduplicate_result implements org.apache.thrift.TBase<deduplicate_result, deduplicate_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deduplicate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deduplicate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deduplicate_resultTupleSchemeFactory());
    }

    public Map<Long,Chunk> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64              , "position"), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Chunk.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deduplicate_result.class, metaDataMap);
    }

    public deduplicate_result() {
    }

    public deduplicate_result(
      Map<Long,Chunk> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deduplicate_result(deduplicate_result other) {
      if (other.isSetSuccess()) {
        Map<Long,Chunk> __this__success = new HashMap<Long,Chunk>();
        for (Map.Entry<Long, Chunk> other_element : other.success.entrySet()) {

          Long other_element_key = other_element.getKey();
          Chunk other_element_value = other_element.getValue();

          Long __this__success_copy_key = other_element_key;

          Chunk __this__success_copy_value = new Chunk(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public deduplicate_result deepCopy() {
      return new deduplicate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(long key, Chunk val) {
      if (this.success == null) {
        this.success = new HashMap<Long,Chunk>();
      }
      this.success.put(key, val);
    }

    public Map<Long,Chunk> getSuccess() {
      return this.success;
    }

    public deduplicate_result setSuccess(Map<Long,Chunk> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Long,Chunk>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deduplicate_result)
        return this.equals((deduplicate_result)that);
      return false;
    }

    public boolean equals(deduplicate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deduplicate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deduplicate_result typedOther = (deduplicate_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deduplicate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deduplicate_resultStandardSchemeFactory implements SchemeFactory {
      public deduplicate_resultStandardScheme getScheme() {
        return new deduplicate_resultStandardScheme();
      }
    }

    private static class deduplicate_resultStandardScheme extends StandardScheme<deduplicate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deduplicate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                  struct.success = new HashMap<Long,Chunk>(2*_map20.size);
                  for (int _i21 = 0; _i21 < _map20.size; ++_i21)
                  {
                    long _key22; // required
                    Chunk _val23; // required
                    _key22 = iprot.readI64();
                    _val23 = new Chunk();
                    _val23.read(iprot);
                    struct.success.put(_key22, _val23);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deduplicate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<Long, Chunk> _iter24 : struct.success.entrySet())
            {
              oprot.writeI64(_iter24.getKey());
              _iter24.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deduplicate_resultTupleSchemeFactory implements SchemeFactory {
      public deduplicate_resultTupleScheme getScheme() {
        return new deduplicate_resultTupleScheme();
      }
    }

    private static class deduplicate_resultTupleScheme extends TupleScheme<deduplicate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deduplicate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Long, Chunk> _iter25 : struct.success.entrySet())
            {
              oprot.writeI64(_iter25.getKey());
              _iter25.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deduplicate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<Long,Chunk>(2*_map26.size);
            for (int _i27 = 0; _i27 < _map26.size; ++_i27)
            {
              long _key28; // required
              Chunk _val29; // required
              _key28 = iprot.readI64();
              _val29 = new Chunk();
              _val29.read(iprot);
              struct.success.put(_key28, _val29);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
